#include <stdio.h>
#include <stdlib.h>
#define TRUE 1
#define FALSE 0
#define MAX_QUEUE_SIZE 10
#define MAX_VERTICES 50

typedef struct queue {
	int queue[MAX_QUEUE_SIZE];
	int front, rear;
}QUEUE;


typedef struct graph {
	int n;
	int adj[MAX_VERTICES][MAX_VERTICES];
}GRAPH;

int visited[MAX_VERTICES]; //중복되게 가지 않도록

void graph_init(GRAPH *g) {
	int x, y;
	g->n = 0;
	for (x = 0; x < MAX_VERTICES; x++) {
		for (y = 0; y < MAX_VERTICES; y++) {
			g->adj[x][y] = 0;
		}
	}
}

void insert_edge(GRAPH *g, int start, int end) {
	if (start >= g->n || end >= g->n) {
		printf("Bigger number than it has to be");
		return;
	}
	g->adj[start][end] = g->adj[end][start] = 1; //중복 노노
}

void init_que(QUEUE *q) {
	q->front = q->rear = 0;
}

void enqueue(QUEUE *q, int data) {
	if ((q->rear + 1) % MAX_QUEUE_SIZE == q->front) {
		printf("Queue is full");
		return;
	}
	q->rear = (q->rear + 1) % MAX_QUEUE_SIZE; // 다음 rear로 올림, Max가 되기 전에는 다시 0으로 만듦
	q->queue[q->rear] = data;
}

int dequeue(QUEUE *q) {
	if (q->front == q->rear) {
		printf("Queue is empty");
	}
	q->front = (q->front + 1) % MAX_QUEUE_SIZE;
	return q->queue[q->front];
}

void BFS(GRAPH *g, int vertex) {
	int y;
	QUEUE q;

	init_que(&q); //?
	visited[vertex] = TRUE;
	printf("%d ", vertex);
	enqueue(&q, vertex);//시작 정점
	while (q.front != q.rear) {
		vertex = dequeue(&q);
		for (y = 0; y < g->n; y++) {
			if (g->adj[vertex][y] && !visited[y]) {
				visited[y] = TRUE;
				printf("%d ", y);
				enqueue(&q, y);
			}
		}
	}

}

int main() {
	int num, i;
	GRAPH *g = (GRAPH *)malloc(sizeof(GRAPH));
	graph_init(g);
	
	num = 9;
	g->n = num;

	insert_edge(g, 0, 5);
	insert_edge(g, 4, 1);
	insert_edge(g, 0, 2);
	insert_edge(g, 1, 3);
	insert_edge(g, 6, 7);
	insert_edge(g, 1, 8);
	insert_edge(g, 2, 1);

	BFS(g, 0);

	free(g);
	return 0;
}
